/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export class DsrvPoapQueryClient {
    client;
    contractAddress;
    constructor(client, contractAddress) {
        this.client = client;
        this.contractAddress = contractAddress;
        this.getEvent = this.getEvent.bind(this);
        this.listAllEvents = this.listAllEvents.bind(this);
        this.listAttendees = this.listAttendees.bind(this);
        this.listMyBadges = this.listMyBadges.bind(this);
    }
    getEvent = async ({ name }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            get_event: {
                name
            }
        });
    };
    listAllEvents = async () => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_all_events: {}
        });
    };
    listAttendees = async ({ name }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_attendees: {
                name
            }
        });
    };
    listMyBadges = async ({ attendee }) => {
        return this.client.queryContractSmart(this.contractAddress, {
            list_my_badges: {
                attendee
            }
        });
    };
}
export class DsrvPoapClient extends DsrvPoapQueryClient {
    client;
    sender;
    contractAddress;
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.registerEvent = this.registerEvent.bind(this);
        this.mintBadge = this.mintBadge.bind(this);
    }
    registerEvent = async ({ description, endTime, image, name, startTime }, fee = "auto", memo, funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            register_event: {
                description,
                end_time: endTime,
                image,
                name,
                start_time: startTime
            }
        }, fee, memo, funds);
    };
    mintBadge = async ({ attendee, event, wasLate }, fee = "auto", memo, funds) => {
        return await this.client.execute(this.sender, this.contractAddress, {
            mint_badge: {
                attendee,
                event,
                was_late: wasLate
            }
        }, fee, memo, funds);
    };
}
