/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type ExecuteMsg = {
  register_event: {
    description: string;
    end_time: number;
    image: string;
    name: string;
    start_time: number;
    [k: string]: unknown;
  };
} | {
  mint_badge: {
    attendee: string;
    event: string;
    was_late: boolean;
    [k: string]: unknown;
  };
};
export interface GetEventResponse {
  description: string;
  end_time: number;
  image: string;
  name: string;
  owner: string;
  start_time: number;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  [k: string]: unknown;
}
export interface ListAllEventsResponse {
  events: GetEventResponse[];
  [k: string]: unknown;
}
export interface ListAttendeesResponse {
  attendees: Attendee[];
  [k: string]: unknown;
}
export interface Attendee {
  attendee: string;
  was_late: boolean;
  [k: string]: unknown;
}
export interface ListMyBadgesResponse {
  badges: Badge[];
  [k: string]: unknown;
}
export interface Badge {
  event: string;
  was_late: boolean;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_event: {
    name: string;
    [k: string]: unknown;
  };
} | {
  list_all_events: {
    [k: string]: unknown;
  };
} | {
  list_attendees: {
    name: string;
    [k: string]: unknown;
  };
} | {
  list_my_badges: {
    attendee: string;
    [k: string]: unknown;
  };
};
export interface DsrvPoapReadOnlyInterface {
  contractAddress: string;
  getEvent: ({
    name
  }: {
    name: string;
  }) => Promise<GetEventResponse>;
  listAllEvents: () => Promise<ListAllEventsResponse>;
  listAttendees: ({
    name
  }: {
    name: string;
  }) => Promise<ListAttendeesResponse>;
  listMyBadges: ({
    attendee
  }: {
    attendee: string;
  }) => Promise<ListMyBadgesResponse>;
}
export class DsrvPoapQueryClient implements DsrvPoapReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getEvent = this.getEvent.bind(this);
    this.listAllEvents = this.listAllEvents.bind(this);
    this.listAttendees = this.listAttendees.bind(this);
    this.listMyBadges = this.listMyBadges.bind(this);
  }

  getEvent = async ({
    name
  }: {
    name: string;
  }): Promise<GetEventResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_event: {
        name
      }
    });
  };
  listAllEvents = async (): Promise<ListAllEventsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_all_events: {}
    });
  };
  listAttendees = async ({
    name
  }: {
    name: string;
  }): Promise<ListAttendeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_attendees: {
        name
      }
    });
  };
  listMyBadges = async ({
    attendee
  }: {
    attendee: string;
  }): Promise<ListMyBadgesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_my_badges: {
        attendee
      }
    });
  };
}
export interface DsrvPoapInterface extends DsrvPoapReadOnlyInterface {
  contractAddress: string;
  sender: string;
  registerEvent: ({
    description,
    endTime,
    image,
    name,
    startTime
  }: {
    description: string;
    endTime: number;
    image: string;
    name: string;
    startTime: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  mintBadge: ({
    attendee,
    event,
    wasLate
  }: {
    attendee: string;
    event: string;
    wasLate: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class DsrvPoapClient extends DsrvPoapQueryClient implements DsrvPoapInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerEvent = this.registerEvent.bind(this);
    this.mintBadge = this.mintBadge.bind(this);
  }

  registerEvent = async ({
    description,
    endTime,
    image,
    name,
    startTime
  }: {
    description: string;
    endTime: number;
    image: string;
    name: string;
    startTime: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_event: {
        description,
        end_time: endTime,
        image,
        name,
        start_time: startTime
      }
    }, fee, memo, funds);
  };
  mintBadge = async ({
    attendee,
    event,
    wasLate
  }: {
    attendee: string;
    event: string;
    wasLate: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_badge: {
        attendee,
        event,
        was_late: wasLate
      }
    }, fee, memo, funds);
  };
}