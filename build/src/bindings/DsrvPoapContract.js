/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class DsrvPoapQueryClient {
    constructor(client, contractAddress) {
        this.getEvent = ({ name }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                get_event: {
                    name
                }
            });
        });
        this.listAllEvents = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                list_all_events: {}
            });
        });
        this.listAttendees = ({ name }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                list_attendees: {
                    name
                }
            });
        });
        this.listMyBadges = ({ attendee }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                list_my_badges: {
                    attendee
                }
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.getEvent = this.getEvent.bind(this);
        this.listAllEvents = this.listAllEvents.bind(this);
        this.listAttendees = this.listAttendees.bind(this);
        this.listMyBadges = this.listMyBadges.bind(this);
    }
}
export class DsrvPoapClient extends DsrvPoapQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.registerEvent = ({ description, endTime, image, name, startTime }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                register_event: {
                    description,
                    end_time: endTime,
                    image,
                    name,
                    start_time: startTime
                }
            }, fee, memo, funds);
        });
        this.mintBadge = ({ attendee, event, wasLate }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                mint_badge: {
                    attendee,
                    event,
                    was_late: wasLate
                }
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.registerEvent = this.registerEvent.bind(this);
        this.mintBadge = this.mintBadge.bind(this);
    }
}
